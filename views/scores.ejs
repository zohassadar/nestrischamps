<!DOCTYPE html>
<html>
<head>
		<%- include('dd-rum.ejs'); %>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<title>NestrisChamps: user settings</title>
		<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css">
		<style>
			.navbar-item img {
				max-height: 2.5rem;
			}
			td.data-number {
				font-family: monospace;
				text-align:  right;
			}

			#scores td, #scores dd {
				overflow-wrap: anywhere;
			}

			#scores tr.even {
				background-color: #eee;
			}
		</style>
</head>
<body>

<%- include('header'); %>

<section class="section">
	<div class="container content">
		<h1 class="title is-1">Score Summary <span class="title is-5"><%= filter.current %></span></h1>

		<p class="is-size-7">
		<% filter.links.forEach((a, idx) => { %>
			<% if (idx > 0) { %> - <% } %>
			<a href="<%= a.href %>" class="filter"><%= a.text %></a>
		<% }) %>
		</p>

		<%- include('partials/pagination') %>

		<!-- TODO: implement sort by field score and date -->
		<table class="table is-bordered" id="scores">
		<thead>
			<tr>
				<th class="sorter" data-field="datetime">Date/Time</th>
				<th>Start Level</th>
				<th>End Level</th>
				<th class="sorter" data-field="score">Score</th>
				<th>Lines</th>
				<th class="sorter" data-field="tetris_rate">Tetris Rate</th>
				<th class="sorter" data-field="num_droughts">Num Droughts</th>
				<th class="sorter" data-field="max_drought">Max Drought</th>
				<th>DAS Avg</th>
				<th>Duration</th>
				<th>Actions</th>
			</tr>
		</thead>
		<tbody>
			<% scores.forEach((score, idx) => { %>
			<% const datetime = score.datetime.toISOString(); %>
			<tr class="<%= idx % 2 ? 'odd': 'even' %>">

				<td title="<%=datetime%>"><%= datetime.substr(0, 16).replace('T', ' ') %></td>
				<td class="data-number" align="right"><%= score.start_level %></td>
				<td class="data-number" align="right"><%= score.end_level %></td>
				<td class="score data-number" align="right"><%= (score.score || 0).toString().padStart(6, '0') %></td>
				<td class="lines data-number" align="right"><%= score.lines %></td>
				<td class="data-number" align="right"><%= ((score.tetris_rate || 0) * 100).toFixed(1) %>%</td>
				<td class="data-number" align="right"><%= score.num_droughts %></td>
				<td class="data-number" align="right"><%= score.max_drought %></td>
				<td class="data-number" align="right"><%= (score.das_avg || 0).toFixed(1) %></td>
				<td class="data-number" align="right">
					<%=
						Math.floor(score.duration / 1000 / 60)
					%>&prime;<%=
						Math.floor((score.duration / 1000) % 60).toString().padStart(2, '0')
					%>&Prime;
				</td>
				<td>
					<a class="details_score" href="/stats/scores/<%= score.id %>">details</a>
					<% if (score.frame_file) { %>
					-
					<a class="replay_score" href="/replay/classic/<%= score.id %>?bg=2&speed=2">replay</a>
					<% } %>
					-
					<a class="delete_score" href="/stats/scores/<%= score.id %>">delete</a>
				</td>
			</tr>
			<% }); %>
		</tbody>
		</table>

		<%- include('partials/pagination') %>
	</div>
</section>

	<script>
		/**/
	const pagination = <%- JSON.stringify(pagination) %>;

	const SCORE_BASES = [0, 40, 100, 300, 1200];
	const LVL_29_TRANS_LINES = 200;

	function getLevel29StartScore(clears) {
		if (!/^[1234]+$/.test(clears)) return '-';

		let lines = 0;
		let score = 0;
		let level = 29;

		clears.split('').forEach(clear => {
			clear = parseInt(clear, 10);
			lines += clear;

			if (lines >= LVL_29_TRANS_LINES) {
				level = 30 + Math.floor((lines - LVL_29_TRANS_LINES) / 10);
			}

			score += (level + 1) * SCORE_BASES[clear];
		});

		return `${score}`;
	}

	document.querySelectorAll('a.filter').forEach(a => {
		const m = (a.href || '').match(/#competition=(0|1)/);
		const qs = m ? `?competition=${m[1]}` : '';
		a.href = `${document.location.pathname}${qs}`;
	});

	document.querySelectorAll('a.delete_score').forEach(a => {
		a.addEventListener('click', async (evt) => {
			evt.preventDefault();

			const parent_tr = a.closest('tr');
			const id = a.href.split('/').pop();
			const score = parent_tr.querySelector('td.score').textContent;
			const lines = parent_tr.querySelector('td.lines').textContent;

			if (!window.confirm(
				`Are you sure you want to delete score entry with score:${score} - lines:${lines}?`
			)) {
				return;
			}

			try {
				await fetch(a.href, {
					method: 'DELETE',
					mode: 'cors',
					credentials: 'same-origin'
				});
			}
			catch(err) {
				console.log('Unable to delete score');
			}

			// remove record in place, dont reload whole list...
			parent_tr.remove();
			// also remove the details row if it existed
			try {
				document.querySelector(`tr#details_${id}`).remove();
			}
			catch(err) { }

			// Could also do:
			// location.reload(); // but that's inefficient
		});
	});

	document.querySelectorAll('a.details_score').forEach(a => {
		a.addEventListener('click', async (evt) => {
			evt.preventDefault();

			// clear all prior details
			document.querySelectorAll('tr.details').forEach(tr => tr.hidden = true);

			const parent_tr = a.closest('tr');
			const id = a.href.split('/').pop();
			const details = document.querySelector(`tr#details_${id}`);

			if (details) {
				details.hidden = false;
				return;
			}

			// details are not already loaded, fetch now and populate in page
			const details_tr = document.createElement('tr');
			details_tr.classList.add('details');
			details_tr.setAttribute('id', `details_${id}`);

			if (parent_tr.classList.contains('even')) {
				details_tr.classList.add('even');
			}

			const td = document.createElement('td');
			td.setAttribute('colspan', '11');
			td.textContent = 'Loading...';

			details_tr.appendChild(td);

			parent_tr.insertAdjacentElement('afterend', details_tr);

			try {
				const response = await fetch(a.href, {
					method: 'GET',
					mode: 'cors',
					credentials: 'same-origin'
				});

				const data = await response.json();

				// TODO: derive stats again and show them
				// TODO show pretty graphs

				const dl = document.createElement('dl');

				{
					// Handle competition mode and score update
					const dt = document.createElement('dt');
					const dd = document.createElement('dd');
					const span = document.createElement('span');
					const a = document.createElement('a');

					dt.textContent = 'Competition Score';

					function updateCompetitionMode() {
						if (data.competition) {
							span.textContent = 'YES - ';
							a.href = `/stats/scores/${id}/competition/0`;
							a.textContent = 'set as regular score';
						}
						else {
							span.textContent = 'NO - ';
							a.href = `/stats/scores/${id}/competition/1`;
							a.textContent = 'set as competition score';
						}
					}

					updateCompetitionMode();

					a.addEventListener('click', async (evt) => {
						evt.preventDefault();

						try {
							const response = await fetch(a.href, {
								method: 'PUT',
								mode: 'cors',
								credentials: 'same-origin'
							});

							data.competition = !data.competition;
							updateCompetitionMode();
						}
						catch(err) {
							alert('Unable to update score. You may already have a manual score for this start level.');
						}
					});

					dd.appendChild(span);
					dd.appendChild(a);
					dl.appendChild(dt);
					dl.appendChild(dd);
				}

				const details = {
					Transition: data.transition ? data.transition.toString().padStart(6, '0') : '-',
					Clears: data.clears || '-',
					"Pseudo 29 Start Score": getLevel29StartScore(data.clears || '-'),
					Pieces: data.pieces || '-',
				};

				for (const [key, value] of Object.entries(details)) {
					const dt = document.createElement('dt');
					const dd = document.createElement('dd');

					dt.textContent = key;
					dd.textContent = value;

					dl.appendChild(dt);
					dl.appendChild(dd);
				}

				// write game file as link
				if (data.frame_file_url) {
					const dt = document.createElement('dt');
					const dd = document.createElement('dd');
					const a = document.createElement('a');

					dt.textContent = 'Game Frame Files';

					a.href = data.frame_file_url;
					a.textContent = data.frame_file_url;

					dd.appendChild(a);
					dl.appendChild(dt);
					dl.appendChild(dd);
				}

				td.innerHTML = ''; // clear the loading message
				td.appendChild(dl);
			}
			catch(err) {
				console.log('Unable to show details');
				console.error(err);
			}
		});
	});

	const orders = ['desc', 'asc'];

	function load() {
		const url = new URL(location);

		for (const [key, value] of Object.entries(pagination)) {
			url.searchParams.set(key, value);
		}

		location.href = url.toString();
	}


	// show up and/or down arrow on active sorter
	try {
		const sorter = document.querySelector(`th.sorter[data-field='${pagination.sort_field}']`);
		sorter.textContent = `${sorter.textContent} ${pagination.sort_order === 'desc' ? '↓' : '↑'}`;
	}
	catch(err) {
		console.log(err);
	}

	document.querySelectorAll('th.sorter').forEach(th => {
		const a = document.createElement('a');
		a.href = '#';
		a.textContent = th.textContent;
		th.innerHTML = '';

		a.addEventListener('click', evt => {
			evt.preventDefault();

			const field = th.dataset.field;

			if (pagination.sort_field === field) {
				const idx = orders.indexOf(pagination.sort_order);
				pagination.sort_order = orders[(idx + 1) % orders.length];
			}
			else {
				pagination.sort_field = field;
				pagination.sort_order = orders[0];
			}

			pagination.page_idx = 0;
			load();
		});

		th.appendChild(a);
	});

	document.querySelectorAll('nav li a').forEach(a => {
		a.addEventListener('click', evt => {
			evt.preventDefault();

			pagination.page_idx = parseInt(a.textContent, 10) - 1;
			load();
		});
	});
	/**/

	</script>

</body>
</html>